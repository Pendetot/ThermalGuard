import os
import sys
import requests
import base64
import getpass
from urllib.parse import urljoin

def get_user_input():
    """Get GitHub token and repository name from user"""
    token = getpass.getpass("Enter your GitHub token (input will be hidden): ")
    repo_owner = input("Enter the GitHub username/organization: ")
    repo_name = input("Enter the repository name: ")
    
    # Use the current directory where script is located
    folder_path = os.path.dirname(os.path.abspath(__file__))
    if folder_path == '':
        folder_path = os.getcwd()
    
    print(f"Will upload files from: {folder_path}")
    
    # Validate inputs
    if not all([token, repo_owner, repo_name]):
        print("Error: All inputs are required.")
        sys.exit(1)
    
    if not os.path.isdir(folder_path):
        print(f"Error: '{folder_path}' is not a valid directory.")
        sys.exit(1)
        
    return token, repo_owner, repo_name, folder_path

def create_github_repo(token, repo_owner, repo_name):
    """Create a new GitHub repository if it doesn't exist"""
    headers = {
        'Authorization': f'token {token}',
        'Accept': 'application/vnd.github.v3+json'
    }
    
    # Check if repo exists
    url = f'https://api.github.com/repos/{repo_owner}/{repo_name}'
    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        print(f"Repository {repo_owner}/{repo_name} already exists.")
        return True
    
    # Create repo if it doesn't exist
    if response.status_code == 404:
        if repo_owner.lower() != getpass.getuser().lower():
            # For organization repos
            create_url = f'https://api.github.com/orgs/{repo_owner}/repos'
        else:
            # For user repos
            create_url = 'https://api.github.com/user/repos'
        
        payload = {
            'name': repo_name,
            'private': False,  # Set to True for private repository
            'auto_init': True
        }
        
        response = requests.post(create_url, headers=headers, json=payload)
        
        if response.status_code in (201, 200):
            print(f"Repository {repo_owner}/{repo_name} created successfully.")
            return True
        else:
            print(f"Error creating repository: {response.status_code}")
            print(response.json())
            return False
    
    print(f"Error checking repository: {response.status_code}")
    return False

def upload_file_to_github(token, repo_owner, repo_name, file_path, github_path):
    """Upload a file to GitHub repository"""
    api_url = f'https://api.github.com/repos/{repo_owner}/{repo_name}/contents/{github_path}'
    
    headers = {
        'Authorization': f'token {token}',
        'Accept': 'application/vnd.github.v3+json'
    }
    
    with open(file_path, 'rb') as file:
        content = file.read()
    
    # Encode content to base64
    encoded_content = base64.b64encode(content).decode('utf-8')
    
    # Check if file already exists
    response = requests.get(api_url, headers=headers)
    
    if response.status_code == 200:
        # File exists, get the SHA to update it
        sha = response.json()['sha']
        payload = {
            'message': f'Update {github_path}',
            'content': encoded_content,
            'sha': sha
        }
    else:
        # File doesn't exist, create it
        payload = {
            'message': f'Add {github_path}',
            'content': encoded_content
        }
    
    response = requests.put(api_url, headers=headers, json=payload)
    
    if response.status_code in (201, 200):
        print(f"✅ Successfully uploaded: {github_path}")
        return True
    else:
        print(f"❌ Error uploading {github_path}: {response.status_code}")
        try:
            print(response.json())
        except:
            print(response.text)
        return False

def upload_folder_to_github(token, repo_owner, repo_name, folder_path, github_base_path=''):
    """Upload all files in a folder to GitHub repository"""
    success_count = 0
    error_count = 0
    
    # Get the script filename to skip uploading itself
    script_name = os.path.basename(__file__)
    
    for root, dirs, files in os.walk(folder_path):
        for file in files:
            # Skip hidden files and this script itself
            if file.startswith('.') or file == script_name:
                continue
                
            # Get local file path
            local_file_path = os.path.join(root, file)
            
            # Calculate relative path for GitHub
            rel_path = os.path.relpath(local_file_path, folder_path)
            github_path = os.path.join(github_base_path, rel_path).replace('\\', '/')
            
            # Upload file
            if upload_file_to_github(token, repo_owner, repo_name, local_file_path, github_path):
                success_count += 1
            else:
                error_count += 1
    
    return success_count, error_count

def main():
    """Main function to upload folder contents to GitHub"""
    print("=" * 60)
    print("GitHub Current Folder Upload Script")
    print("=" * 60)
    print("This script will upload all files in its directory to GitHub")
    print("=" * 60)
    
    # Get user inputs
    token, repo_owner, repo_name, folder_path = get_user_input()
    
    # Create or confirm repository exists
    if not create_github_repo(token, repo_owner, repo_name):
        print("Failed to create or access repository. Exiting.")
        return
    
    # Upload folder contents
    print(f"\nUploading contents of current directory to '{repo_owner}/{repo_name}'...")
    print(f"(Except this script itself)")
    success_count, error_count = upload_folder_to_github(token, repo_owner, repo_name, folder_path)
    
    # Print summary
    print("\n" + "=" * 60)
    print(f"Upload Summary:")
    print(f"✅ Successfully uploaded: {success_count} files")
    print(f"❌ Failed to upload: {error_count} files")
    print("=" * 60)
    
    print(f"\nRepository URL: https://github.com/{repo_owner}/{repo_name}")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nOperation cancelled by user.")
    except Exception as e:
        print(f"\nAn error occurred: {str(e)}")